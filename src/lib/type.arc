;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;; Type of Object with Attributes
;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------

;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;; TODO
;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------

;; 2017-12-22 [x] Unregister type (if not used)


;; ----------------------------------------------------------------------------
;; add-attr
;; ----------------------------------------------------------------------------

(def add-attr (typ attr)

    (ensure-if-not-exits attrs-by-type* typ)
 
    (let t (attrs-by-type* typ)
        (= (t (attr 'name)) attr)
    )
)

;; ----------------------------------------------------------------------------
;; add-attr-affects
;; ----------------------------------------------------------------------------
;;
;; a affects (c d)
;; b affects (c d)
;;
;; attr-a -> (attr-c attr-d)
;; attr-b -> (attr-c attr-d)
;;
;; ----------------------------------------------------------------------------

(def add-attr-affects (typ attr-affect attrs-affected) 

    (ensure-if-not-exits attrs-affected-by-type* typ)

    (let aa (attrs-affected-by-type* typ) 
        (= (aa attr-affect) attrs-affected)  
    )
)

;; ----------------------------------------------------------------------------
;; get-affected-attrs
;; ----------------------------------------------------------------------------

(def get-affected-attrs (typ attr)
    (let aas (attrs-affected-by-type* typ)
        (aas attr) ;; aat = affected-attributes
    )
)


;; ----------------------------------------------------------------------------
;; register-type
;; ----------------------------------------------------------------------------

(def register-type (typ init-fn calc-fn)
    (with
        (
            register-init-fn    (fn (typ init-fn) (init-fn typ))
            register-calc-fn    (fn (typ calc-fn)
                                    (= (calc-fns-by-type* typ) calc-fn)
                                )
        )
        (register-init-fn typ init-fn)
        (register-calc-fn typ calc-fn)
    )
)

;; ----------------------------------------------------------------------------
;; is-type-registered
;; ----------------------------------------------------------------------------

(def is-type-registered (typ)
    (no 
        (is (attrs-by-type* typ) nil)
    )
)
