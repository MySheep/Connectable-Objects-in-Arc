




;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------
;; VIEW - TUI
;; ----------------------------------------------------------------------------
;; ----------------------------------------------------------------------------


;; ----------------------------------------------------------------------------
;; print-left
;; ----------------------------------------------------------------------------

(def print-left (ob attr)
    (if (attr 'is-writeable)
        (pr "-|>")
        (pr " | ")
    )
)

;; ----------------------------------------------------------------------------
;; print-fw-conns
;; ----------------------------------------------------------------------------

(def print-fw-conns (ob attr)

    (withs 
        (
        conns   (get-forward-conns ob attr)
        
        cs      (map 
                    (fn (_) 
                        (conn-as-string (list (car _) (cadr _)))
                    )
                    conns
                )
        )
        (if (no cs)
            (pr "not connected")
            (pr cs)
        )
    )
)

;; ----------------------------------------------------------------------------
;; print-right
;; ----------------------------------------------------------------------------

(def print-right (ob attr)
    (if (attr 'is-readable)
        (do (pr "|>-") (print-sp) (print-fw-conns ob attr))
        (pr "|  ")
    )
)

;; ----------------------------------------------------------------------------
;; print-name
;; ----------------------------------------------------------------------------

(def print-name (ob attr)
    (pr (attr 'name))
)

;; ----------------------------------------------------------------------------
;; print-num
;; ----------------------------------------------------------------------------

(def print-num (val ls)
    (withs
        (   a     (num val)
            spcs  (- ls (len a))
        )
        (n-of spcs (pr " ")) (pr a)
    )
)

;; ----------------------------------------------------------------------------
;; print-val
;; ----------------------------------------------------------------------------

(def print-value (ob attr)
    (withs
        (   vls  (values-by-object* ob)
            val  (vls attr)
            lsp  4
        )
        (if (no val) ; never pass a nil
            (n-of ls (pr " ")) 
            (print-num val lsp)
        )
    )
)

;; ----------------------------------------------------------------------------
;; print-dirty
;; ----------------------------------------------------------------------------

(def print-dirty (ob attr)
    (if (is-dirty ob attr)
        (pr "*")
        (pr " ")
    )
)

;; ----------------------------------------------------------------------------
;; print-middle
;; ----------------------------------------------------------------------------

(def print-middle (ob attr)
    (print-name ob attr) (print-value ob attr) (print-dirty ob attr)
)

;; ----------------------------------------------------------------------------
;; print-sp
;; ----------------------------------------------------------------------------

(def print-sp ()
    (pr " ")
)

;; ----------------------------------------------------------------------------
;; print-attr
;; ----------------------------------------------------------------------------

(def print-attr (ob attr)
    (print-left ob attr) (print-sp) (print-middle ob attr) (print-sp) (print-right ob attr)
)



;; ----------------------------------------------------------------------------
;; print-obj
;; ----------------------------------------------------------------------------

;;  ----------
;; -|> a 3   |>-
;; -|> b 2   |>-
;;  |  c 5 * |>- (adder2.a)
;;  |  d 1 * |>-
;;  ----------

(def print-obj (ob)
    (withs 
        (
        
        attrs   (attrs-by-type* (ob 'type))

        pr-top      (fn () (prn "  ---------  "))
        pr-bottom   (fn () (prn "  ---------  "))
        pr-middle   (fn ()
                        (each attr-name (sort < (keys attrs))
                            (print-attr ob (attrs attr-name)) (prn)
                        )
                    )
        )
        
        (prn "")

        (pr-top)
        (pr-middle)
        (pr-bottom)
        
        (prn "")
    )
)
